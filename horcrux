#!/usr/bin/env python3

'''
Horcrux: immortality for your encrypted backups

Usage:
  horcrux  -h
  horcrux [-vd] autoverify  [-p <verify-key>] [<working-dir>]
  horcrux [-vd] autodecrypt [-p <verify-key>] [<working-dir>]
  horcrux [-vd] setup   <threshold> <shares> [-s <sign-key>] [<output-dir>]
  horcrux [-vd] sign    <sign-key> <file-to-sign>
  horcrux [-vd] encrypt <encrypt-key> <sign-key> <file-to-encrypt> <output-path>
  horcrux [-vd] verify  <verify-key> <signed-file>
  horcrux [-vd] decrypt <decrypt-key> <verify-key> <locked-file> <output-path> <share>...
  horcrux [-vd] hide    <decrypt-key> <file-to-hide> <cover-file> <output-path>
  horcrux [-vd] unhide  <decrypt-key> <stego-file> <output-path>

Options:
  -h --help        Show this text.
  -v --verbose     Print pedantic but human-readable messages.
  -d --debug       Print debugging messages. *** WARNING: PRINTS MASTER PASSWORD! ***
  <output-dir>     Where to put the generated keys [default: .]
  -s <sign-key>    Use an existing PGP private key as your signing key
  -p <verify-key>  Use an existing PGP public key as your verification key
'''

# TODO make permissions accessible to non-root user
# TODO if it exists, pick up HORCRUX_KEY_DIR
# TODO capitalize messages

from docopt     import docopt
from glob       import glob
from gnupg      import GPG
from os         import makedirs, remove
from os.path    import join, exists, splitext, abspath, dirname, basename
from re         import match
from subprocess import check_call, check_output, Popen, PIPE
from sys        import argv
from tempfile   import mktemp, mkdtemp
from getpass    import getpass

#########
# setup #
#########

# TODO prompt for some user input chars to mix in too
def create_password(nchars, verbose):
    if verbose:
        print("generating a %d-char master password to shield the decrypt key" % nchars)
        print('optionally, you can include some text of your own here as well.')
        print('that way it will be secure even if your os has been compromised!')
        print('just randomly mash out something up to %d characters long,' % (nchars / 2))
        print('and the rest will be filled in using the system random number generator.', flush=True)
    msg = "enter up to %d alphanumeric chars to mix in to the master password: " % (nchars / 2)
    user_chars = input(msg).replace('\n', '')[:65]
    nchars = nchars - len(user_chars)
    cmd = ['pwgen', '--secure', str(nchars), '1']
    passwd = check_output(cmd, encoding='UTF-8').rstrip('\n') + user_chars
    return passwd

def create_shares(gpg, decrypt_passwd, sign_passwd, threshold, nshares, output_dir, verbose):
    if verbose:
        msg = 'splitting the master password into %d shares (horcruxes), any %d of which can reconstruct it'
        print(msg % (nshares, threshold), flush=True)
    # TODO why does setting -s 1024 cause 'FATAL: input string too long.' now??
    cmd = ['ssss-split', '-t', str(threshold), '-n', str(nshares)]
    proc = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, text=True)
    (out, err) = proc.communicate(decrypt_passwd)
    if verbose and len(err) > 0:
        print("stderr:")
        print(err, flush=True)
    if verbose > 1:
        print("stdout:")
        print(out, flush=True)
    shares = [l for l in out.split('\n') if len(l) > 0]
    if verbose > 1:
        print(shares)
    assert len(shares) == nshares
    for n in range(1, nshares+1):
        path = join(output_dir, 'horcrux-%.2d.key' % n)
        if verbose:
            print('writing %s' % path, flush=True)
        share = shares[n-1]
        # assert len(share) == 258 # TODO not needed if we test round trip later?
        with open(path, 'w') as f:
            f.write('%s\n' % share)
        sign_file(gpg, 'verify', sign_passwd, path, verbose) # TODO have to adjust 'verify' to the keyid?

def create_keyring(home, verbose):
    if verbose:
        print('creating temporary gpg instance with homedir %s' % home, flush=True)
    with open(join(home, 'gpg-agent.conf'), 'w') as f:
        f.write('allow-loopback-pinentry\n')
    return GPG(gnupghome=home, use_agent=False) # TODO use_agent? keyring?

def create_keypair(gpg, pubname, privname, passwd, output_dir, verbose):
    pubfile   = join(output_dir, pubname  + '.key')
    privfile  = join(output_dir, privname + '.key')
    bothnames = pubname + '/' + privname
    if verbose:
        print('creating %s keypair' % bothnames, flush=True)
    params = {
        'key_type'   : 'RSA',
        'key_length' : 4096,
        'name_real'  : 'horcrux ' + bothnames + ' key',
        'name_email' : 'horcrux-' + privname + '-key@fake.email', # TODO gotta be a better way right? key id?
        'passphrase' : passwd
    }
    gpg.gen_key(gpg.gen_key_input(**params))
    [pubname, privname] = bothnames.split('/')
    pubfile  = join(output_dir, pubname  + '.key')
    privfile = join(output_dir, privname + '.key')
    if verbose:
        print('writing %s' % pubfile, flush=True)
    with open(pubfile, 'w') as f:
        f.write(gpg.export_keys(pubname, secret=False))
    if verbose:
        print('writing %s' % privfile, flush=True)
    with open(privfile, 'w') as f:
        f.write(gpg.export_keys(privname, secret=True, passphrase=passwd))

def prompt_password(desc, confirm=True):
    p1 = getpass(prompt='enter a password ' + desc + ': ')
    if not confirm:
        return p1
    p2 = getpass(prompt='confirm password ' + desc + ': ')
    if p1 == p2:
        return p1
    else:
        print("ERROR! passwords don't match", flush=True)
        return prompt_password(desc, confirm)

def prompt_sign_passwd(filename):
    return prompt_password('to unlock %s' % filename, confirm=False)

def setup(gpg, threshold, nshares, output_dir, verbose=False, sign_key=None):
    decrypt_passwd = create_password(128, verbose)
    create_keypair(gpg, 'encrypt', 'decrypt', decrypt_passwd, output_dir, verbose)
    if sign_key is None:
        sign_passwd = prompt_password('for the signing key', confirm=True)
        create_keypair(gpg, 'verify', 'sign', sign_passwd, output_dir, verbose)
    else:
        sign_passwd = prompt_sign_passwd(sign_key)
        import_key(gpg, sign_key, verbose)
    create_shares(gpg, decrypt_passwd, sign_passwd, threshold, nshares, output_dir, verbose)

########
# sign #
########

def import_key(gpg, filename, verbose):
    if verbose:
        print('importing gpg public key %s' % filename, flush=True)
    with open(filename, 'r') as f:
        gpg.import_keys(f.read())

# TODO catch gpg errors here
def sign_file(gpg, keyname, sign_passwd, file_to_sign, verbose):
    outfile = file_to_sign + '.sig'
    if verbose:
        print('signing %s with "%s" key (output in %s)' % (file_to_sign, keyname, outfile), flush=True)
    with open(file_to_sign, 'rb') as f:
        signed = gpg.sign_file(f, keyid=keyname, detach=True, passphrase=sign_passwd, binary=False)
    with open(outfile, 'wb') as f:
        f.write(signed.data)

def sign(gpg, sign_key, sign_passwd, file_to_sign, verbose):
    import_key(gpg, sign_key, verbose)
    sign_file(gpg, 'verify', sign_passwd, file_to_sign, verbose)

###########
# encrypt #
###########

def encrypt_file(gpg, recipient, before_path, after_path, verbose):
    if verbose:
        print('encrypting %s to "%s" (output in %s)' \
               % (before_path, recipient, after_path), flush=True)
    # TODO is this one ok without binary?
    with open(before_path, 'r') as f:
        status = gpg.encrypt_file(f, recipients=[recipient],
                                  output=after_path, always_trust=True)
    if not status.ok:
        print(status.status)
        print(status.stderr)
        raise SystemExit(1)

def encrypt(gpg, encrypt_key, sign_key, before, after, verbose):
    import_key(gpg, encrypt_key, verbose)
    sign_passwd = prompt_sign_passwd(sign_key)
    import_key(gpg, sign_key, verbose)
    encrypt_file(gpg, 'encrypt', before, after, verbose)
    sign_file(gpg, 'verify', sign_passwd, after, verbose)

##########
# verify #
##########

def find_signature(signed_file):
    sig_file = signed_file + '.sig'
    asc_file = signed_file + '.asc'
    if exists(sig_file):
        return sig_file
    if exists(asc_file):
        return asc_file
    return None

def verify(gpg, verify_key, signed_file, verbose):
    import_key(gpg, verify_key, verbose)
    if verbose:
        print('verifying %s with %s' % (signed_file, verify_key), flush=True)
    signature = find_signature(signed_file)
    if exists(signed_file) and signature is None:
        # TODO put this logic in find_signature?
        dat = basename(signed_file)
        sig = dat + '.sig'
        asc = dat + '.asc'
        msg = f"WARNING: {dat} missing signature. Expected {sig} or {asc}"
        print(msg, flush=True)
        return # TODO execption here?
    elif signature is not None and not exists(signed_file):
        sig = basename(signature)
        dat = basename(signed_file)
        msg = f"WARNING: {sig} missing signed data. Expected it to be in {dat}"
        print(msg, flush=True)
        return
    with open(signature, 'rb') as f:
        success = gpg.verify_file(f, data_filename=signed_file)
    if success:
        print(f"verified signature for {basename(signed_file)}", flush=True)
    else:
        print(f"ERROR: failed to verify signature for {basename(signed_file)}", flush=True)

###########
# decrypt #
###########

def extract_master_password(stdout, stderr):
    # option 1: fatal error so no password
    if 'FATAL:' in stderr:
        return None
    # option 2: password is in stdout
    # (may also be a failed password with dots)
    passwd = stdout.strip()
    if len(passwd) == 128 and passwd.count('.') == 0:
        return passwd
    # option 3: password is in stderr along with a message
    # (may also be a failed password with dots)
    passwd = stderr.split()[-1]
    if len(passwd) == 128 and passwd.count('.') == 0:
        return passwd
    # something else unexpected
    if verbose > 1:
        msg = '\n'.join([
            "Unexpected ssss-combine output.",
            f"stdout: {stdout}",
            f"stderr: {stderr}"
        ])
        print(msg, flush=True)
    return None

def recreate_password(threshold, share_paths, stego_pass, verbose):
    if verbose:
        print('trying to reconstruct master password from %d shares...' % threshold, end='', flush=True)
    cmd = ['ssss-combine', '-t', str(threshold)]
    shares = '' # newline-separated list of shares
    for path in share_paths:
        with open(path, 'r') as f:
            shares += f.read() #.decode('utf-8')
    if verbose > 1:
        print(f"shares:\n'{shares}'", flush=True)
    proc = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, text=True)
    (out, err) = proc.communicate(shares)
    proc.wait() # TODO does this help?
    # TODO why doesn't proc.returncode == 0 work?
    passwd = extract_master_password(out, err)
    if passwd is None:
        if verbose:
            print('fail', flush=True)
        raise Exception
    else:
        if verbose:
            print('success!', flush=True)
        if verbose > 1:
            print(f"passwd: '{passwd}'", flush=True)
        return passwd

def auto_recreate_password(share_paths, stego_pass, verbose):
    # TODO how to avoid failure if duplicates? (.key and .jpeg for example)
    for n in range(1, len(share_paths)+1):
        try:
            return recreate_password(n, share_paths[:n], stego_pass, verbose)
        except:
            # raise
            continue
    print('failed to reconstruct master password', flush=True)
    raise SystemExit(1)

def untar(tarfile, extension, verbose):
    outdir = tarfile.split(extension)[0]
    if verbose:
        base = basename(tarfile)
        print(f"extracting {base}:", flush=True)
    cmd = ['tar', '-x', '-f', tarfile, '--one-top-level=%s' % outdir]
    if verbose:
        cmd.append('-v')
    check_call(cmd)
    if not verbose:
        base = basename(outdir)
        print(f"extracted {base}/", flush=True)
    # TODO flag to control this
    # TODO use shred rather than simple unlink
    remove(tarfile)
    print(f"deleted {basename(tarfile)}", flush=True)

def decrypt_file(gpg, decrypt_key, secretfile, password, outfile, verbose):
    if verbose:
        msg = 'decrypting %s with %s and the password (output in %s)'
        print(msg % (basename(secretfile),
                     basename(decrypt_key),
                     basename(outfile)), flush=True)
    import_key(gpg, decrypt_key, verbose)
    with open(secretfile, 'rb') as f:
        status = gpg.decrypt_file(f, passphrase=password, output=outfile)
    if not status.ok:
        print(status.status, flush=True)
        print(status.stderr, flush=True)
        raise Exception
    print('decrypted %s' % basename(outfile), flush=True)
    # TODO flag to control this
    # TODO remove lzo or add lzop to dependencies
    for ext in ['.tar', '.tar.gz', '.tgz', '.tar.bz2', '.tar.lzo']:
        if outfile.endswith(ext):
            untar(outfile, ext, verbose)
    for ext in ['.gpg']:
        if outfile.endswith(ext):
            out = basename(outfile)
            msg = f"WARNING: decrypted {out} successfully, but the output is also encrypted."
            msg += " Maybe you need a password to unlock it?"
            print(msg, flush=True)

def decrypt(gpg, decrypt_key, secretfile, outfile, passwd, verbose, verify_key=None):
    if verify_key: # TODO assume this?
        verify(gpg, verify_key, secretfile, verbose)
    decrypt_file(gpg, decrypt_key, secretfile, passwd, outfile, verbose)

########
# hide #
########

def sha256sum(filename, verbose):
    if verbose:
        print('calculating sha256sum of %s' % filename, flush=True)
    cmd = ['sha256sum', filename]
    sha = check_output(cmd, encoding='UTF-8').split()[0]
    return sha

def hide(file_to_hide, cover_file, outfile, passphrase, verbose):
    if verbose:
        print('hiding %s in %s (output in %s)' % (file_to_hide, cover_file, outfile), flush=True)
    # TODO quote passphrase?
    cmd = ['steghide', 'embed', '-ef', file_to_hide, '-cf', cover_file,
           '-sf', outfile, '-p', passphrase]
    check_call(cmd)

##########
# unhide #
##########

def unhide(stego_file, outfile, passphrase, verbose):
    if verbose:
        print('extracting %s to %s' % (basename(stego_file), outfile), flush=True)
    cmd = ['steghide', 'extract', '-sf', stego_file,
           '-xf', outfile, '-p', passphrase]
    if not verbose:
        cmd.append('--quiet')
    check_call(cmd)

def unhide_any(gpg, shares, passphrase, verbose):
    # unhides and hidden shares and gives back a key-only list
    regular  = [s for s in shares if     s.endswith('.key')]
    hidden   = [s for s in shares if not s.endswith('.key')]
    unhidden = []
    for n in range(len(hidden)):
        stego_file = hidden[n]
        tmpfile    = mktemp(suffix='.key')
        unhide(stego_file, tmpfile, passphrase, verbose)
        unhidden.append(tmpfile)
    return sorted(regular) + sorted(unhidden)

###############
# auto-verify #
###############

def find_files(working_dir, verify_key=None):
    # TODO be more intelligent about names? this fails if they're at all tricky
    if not working_dir:
        working_dir = '.'
    files = glob(join(working_dir, '*'))
    filters = {
        'secret'      : '.*\\.gpg$',
        'verify_key'  : '.*verify\\.key$',
        'decrypt_key' : '.*decrypt\\.key$',
        'shares'      : '.*(horcrux|share).*\\.(key|hrx)$',
        'signatures'  : '.*\\.(sig|asc)$'
    }
    matches = {}
    for key in filters:
        matches[key] = sorted(f for f in files if match(filters[key], basename(f)))
    if verify_key is not None:
        matches['verify_key'] = [verify_key]
    matches['shares'] = sorted(s for s in matches['shares'] if not s.endswith('.sig'))
    matches['signed'] = sorted(splitext(s)[0] for s in matches['signatures'])
    return matches

def auto_verify(gpg, working_dir, verbose, verify_key=None):
    files = find_files(working_dir, verify_key)
    # print('files: %s' % files
    if len(files['verify_key']) == 0: raise SystemExit('verify key not found')
    if len(files['verify_key']) >  1: raise SystemExit('found multiple verify keys')
    key = files['verify_key'][0]
    signed_files = sorted(set(files['secret'] + files['shares'] + files['signed']))
    for signed_file in signed_files:
        verify(gpg, key, signed_file, verbose)

################
# auto-decrypt #
################

def auto_decrypt(gpg, working_dir, verbose, verify_key=None):
    auto_verify(gpg, working_dir, verbose, verify_key)
    files = find_files(working_dir, verify_key)
    shares  = sorted(files['shares'])
    secrets = sorted(files['secret']) # TODO catch misc filenames here
    if len(files['decrypt_key']) == 0: raise SystemExit('ERROR: decrypt key not found')
    if len(files['decrypt_key'])  > 1: raise SystemExit('ERROR: multiple decrypt keys found')
    if len(shares ) == 0: raise SystemExit('ERROR: no password shares found')
    if len(secrets) == 0: raise SystemExit('ERROR: no secret files found')
    decrypt_key = files['decrypt_key'][0]
    stego_pass  = sha256sum(decrypt_key, verbose)
    shares      = unhide_any(gpg, shares, stego_pass, verbose)
    if verbose > 1:
        print(f"shares: {shares}", flush=True)
    master_pass = auto_recreate_password(shares, stego_pass, verbose)
    summary = {'succeeded': [], 'failed': []}
    for secret in secrets:
        outfile = splitext(secret)[0]
        try:
            decrypt(gpg, decrypt_key, secret, outfile, master_pass, verbose) # TODO verify_key?
            summary['succeeded'].append(outfile)
        except Exception as err:
            print(err, flush=True)
            print(f"ERROR: failed to decrypt {outfile}", flush=True)
            summary['failed'].append(outfile)
            continue
    if verbose > 1:
        print(f"summary: {summary}", flush=True)

# TODO if a file is doubly encrypted that shouldn't be an error. just unwrap one layer

########
# main #
########

def main(args):
    if args['--debug']:
        verbose = 2
    elif args['--verbose']:
        verbose = 1
    else:
        verbose = 0
    home = mkdtemp() # TODO use a context or handle exceptions
    gpg = create_keyring(home, verbose)
    
    if verbose > 1:
        print('args: %s' % args, flush=True)

    if args['setup']:
        output_dir = args['<output-dir>']
        if output_dir is None:
            output_dir = '.'
        if not exists(output_dir):
            makedirs(output_dir)
        threshold = int(args['<threshold>'])
        shares    = int(args['<shares>'])
        setup(gpg, threshold, shares, output_dir, verbose, sign_key=args['-s'])

    elif args['decrypt']:
        decrypt_key = args['<decrypt-key>']
        verify_key  = args['<verify-key>']
        secret      = args['<locked-file>']
        outfile     = args['<output-path>']
        shares      = args['<share>']
        stego_pass  = sha256sum(decrypt_key, verbose)
        shares      = unhide_any(gpg, shares, stego_pass, verbose)
        master_pass = auto_recreate_password(shares, stego_pass, verbose)
        decrypt(gpg, decrypt_key, secret, outfile, master_pass, verbose, verify_key)

    # TODO raise error if this fails due to incorrect password!
    elif args['sign']:
        sign_key     = args['<sign-key>']
        file_to_sign = args['<file-to-sign>']
        sign_passwd = prompt_sign_passwd(sign_key)
        sign(gpg, sign_key, sign_passwd, file_to_sign, verbose)

    elif args['encrypt']:
        sign_key    = args['<sign-key>']
        encrypt_key = args['<encrypt-key>']
        before      = args['<file-to-encrypt>']
        after       = args['<output-path>']
        encrypt(gpg, encrypt_key, sign_key, before, after, verbose)

    elif args['verify']:
        verify_key = args['<verify-key>']
        secret     = args['<signed-file>']
        verify(gpg, verify_key, secret, verbose)

    elif args['hide']:
        decrypt_key  = args['<decrypt-key>']
        file_to_hide = args['<file-to-hide>']
        cover_file   = args['<cover-file>']
        outfile      = args['<output-path>']
        stego_pass   = sha256sum(decrypt_key, verbose)
        hide(file_to_hide, cover_file, outfile, stego_pass, verbose)

    elif args['unhide']:
        decrypt_key = args['<decrypt-key>']
        stego_file  = args['<stego-file>']
        outfile     = args['<output-path>']
        stego_pass  = sha256sum(decrypt_key, verbose)
        unhide(stego_file, outfile, stego_pass, verbose)

    elif args['autoverify']:
        working_dir = args['<working-dir>']
        auto_verify(gpg, working_dir, verbose, verify_key=args['-p'])

    elif args['autodecrypt']:
        working_dir = args['<working-dir>']
        auto_decrypt(gpg, working_dir, verbose, verify_key=args['-p'])

if __name__ == '__main__':
    args = docopt(__doc__)
    main(args)

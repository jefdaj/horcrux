$ # if you create keys for a 3-of-5 scheme
$ horcrux -v setup 3 5 example
creating temporary gpg instance with homedir /tmp/tmpxC_WQc
generating a master password, which won't be saved anywhere
splitting the password into 5 shares, any 3 of which can reconstruct it
writing share 1 to example/share-01.key
writing share 2 to example/share-02.key
writing share 3 to example/share-03.key
writing share 4 to example/share-04.key
writing share 5 to example/share-05.key
creating encrypt/decrypt keypair
writing example/encrypt.key
writing example/decrypt.key
creating verify/sign keypair
writing example/verify.key
writing example/sign.key
$
$ # then encrypt a new file (aka update the secret)
$ echo 'super secret message!' > example/secret.txt
$ horcrux -v encrypt example/{encrypt.key,sign.key,secret.txt,secret.txt.gpg}
creating temporary gpg instance with homedir /tmp/tmpA6QIwF
importing gpg key example/encrypt.key
importing gpg key example/sign.key
encrypting example/secret.txt to "encrypt" (output in example/secret.txt.gpg)
signing example/secret.txt.gpg with "verify" key (output in example/secret.txt.gpg.sig)
$
$ # and distribute the verify and decrypt keys to trustees,
$ # along with a password share each,
$ # then they can each verify the signature
$ horcrux -v verify example/{verify.key,secret.txt.gpg*}
creating temporary gpg instance with homedir /tmp/tmpk5qjmw
importing gpg key example/verify.key
verifying example/secret.txt.gpg with example/verify.key
verified signature for example/secret.txt.gpg
$
$ # but with only 1 or 2 shares, they can't decrypt it
$ horcrux -v decrypt example/{decrypt.key,verify.key,secret.txt.gpg*,secret-decrypt-with-keys.txt,share-{01,02}.key}
creating temporary gpg instance with homedir /tmp/tmpxrXfQk
importing gpg key example/verify.key
verifying example/secret.txt.gpg with example/verify.key
verified signature for example/secret.txt.gpg
trying to reconstruct password from 1 shares... fail
trying to reconstruct password from 2 shares... fail
failed to reconstruct password
$
$ # 3 shares are needed to get the password,
$ # which is needed to get the decrypt key, which is needed to get the secret
$ horcrux -v decrypt example/{decrypt.key,verify.key,secret.txt.gpg*,secret-decrypt-with-keys.txt,share-{01,04,05}.key}
creating temporary gpg instance with homedir /tmp/tmphMx4Or
importing gpg key example/verify.key
verifying example/secret.txt.gpg with example/verify.key
verified signature for example/secret.txt.gpg
trying to reconstruct password from 1 shares... fail
trying to reconstruct password from 2 shares... fail
trying to reconstruct password from 3 shares... success!
decrypting example/secret.txt.gpg with example/decrypt.key and the password (output in example/secret-decrypt-with-keys.txt)
importing gpg key example/decrypt.key
decrypted example/secret.txt.gpg to example/secret-decrypt-with-keys.txt
$
$ # optionally, you can hide keys in images or sound files
$ # (that requires prompting for another password)
$ horcrux -v hide example/share-01.key example.jpeg example/share-01.jpeg greatpassphrase
embedding "example/share-01.key" in "example.jpeg"... 0.2%embedding "example/share-01.key" in "example.jpeg"... done
writing stego file "example/share-01.jpeg"... done
creating temporary gpg instance with homedir /tmp/tmpz9F6ok
hiding example/share-01.key in example.jpeg (output in example/share-01.jpeg)
$
$ # the hidden files can be unhidden individually
$ horcrux -v unhide example/{share-01.jpeg,share-01-unhidden.key} greatpassphrase
wrote extracted data to "example/share-01-unhidden.key".
creating temporary gpg instance with homedir /tmp/tmpPIrey3
extracting example/share-01-unhidden.key from example/share-01.jpeg
$
$ # or you will be prompted for the password during decrypt
$ # (hint: it's greatpassphrase)
$ horcrux -v decrypt example/{decrypt.key,verify.key,secret.txt.gpg*,secret-decrypt-with-jpeg.txt,share-01.jpeg,share-{02,04}.key}
Enter passphrase: 
wrote extracted data to "/tmp/tmpJ2nFcC".
creating temporary gpg instance with homedir /tmp/tmpmi4Omk
importing gpg key example/verify.key
verifying example/secret.txt.gpg with example/verify.key
verified signature for example/secret.txt.gpg
trying to reconstruct password from 1 shares... fail
trying to reconstruct password from 2 shares... fail
trying to reconstruct password from 3 shares... extracting /tmp/tmpJ2nFcC from example/share-01.jpeg
success!
decrypting example/secret.txt.gpg with example/decrypt.key and the password (output in example/secret-decrypt-with-jpeg.txt)
importing gpg key example/decrypt.key
decrypted example/secret.txt.gpg to example/secret-decrypt-with-jpeg.txt
$
$ # autoverify and autodecrypt modes look for files
$ # in the given directory (default: .), making it possible
$ # to launch horcrux by dropping a folder on the .desktop file
$ cd example && horcrux -v autodecrypt
creating temporary gpg instance with homedir /tmp/tmpvEOYs3
importing gpg key ./verify.key
verifying ./secret.txt.gpg with ./verify.key
verified signature for ./secret.txt.gpg
trying to reconstruct password from 1 shares... fail
trying to reconstruct password from 2 shares... fail
trying to reconstruct password from 3 shares... success!
decrypting ./secret.txt.gpg with ./decrypt.key and the password (output in ./secret.txt)
importing gpg key ./decrypt.key
decrypted ./secret.txt.gpg to ./secret.txt
$
$ # final files:
$ ls
decrypt.key
encrypt.key
secret-decrypt-with-jpeg.txt
secret-decrypt-with-keys.txt
secret.txt
secret.txt.gpg
secret.txt.gpg.sig
share-01.key
share-02.key
share-03.key
share-04.key
share-05.key
sign.key
verify.key
$
$ cat secret*.txt
super secret message!
super secret message!
super secret message!
$
